From 223dfe972d645678c0dd8b00a35151f1ebf31008 Mon Sep 17 00:00:00 2001
From: Isaac Gounton <igounton@gmail.com>
Date: Sat, 14 Jun 2025 01:02:45 -0400
Subject: [PATCH] Added Awesome TTS

---
 README.md                                |   72 +-
 main-tiny.Dockerfile                     |    2 +-
 main.Dockerfile                          |    1 +
 package.json                             |    2 +-
 src/config.ts                            |   10 +-
 src/server/routers/mcp.ts                |   66 +-
 src/server/routers/rest.ts               |   39 +
 src/short-creator/ShortCreator.ts        |   24 +-
 src/short-creator/libraries/Kokoro.ts    |   77 -
 src/short-creator/libraries/TTS.ts       |  115 ++
 src/types/shorts.ts                      |   98 +-
 voices/README.md                         |  361 ++++
 voices/chatterbox-predefined-voices.json |   32 +
 voices/kokoro_voices.json                |  434 +++++
 voices/openai_edge_tts_voices.json       | 1970 ++++++++++++++++++++++
 15 files changed, 3164 insertions(+), 139 deletions(-)
 delete mode 100644 src/short-creator/libraries/Kokoro.ts
 create mode 100644 src/short-creator/libraries/TTS.ts
 create mode 100644 voices/README.md
 create mode 100644 voices/chatterbox-predefined-voices.json
 create mode 100644 voices/kokoro_voices.json
 create mode 100644 voices/openai_edge_tts_voices.json

diff --git a/README.md b/README.md
index 06eb8a5..34a81ad 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,27 @@
 # Description
 
-An open source automated video creation tool for generating short-form video content. Short Video Maker combines text-to-speech, automatic captions, background videos, and music to create engaging short videos from simple text inputs.
+An open source automated video creation tool for generating sh- **Kokoro ONNX**: High-quality neural TTS with multi-language support (EN, JP, CN, ES, FR, etc.)
+- **Chatterbox TTS**: Neural TTS with voice cloning capabilities (English-only)
+- **OpenAI Edge TTS**: Microsoft Edge TTS wrapper with extensive voice catalog supporting 75+ languages-form vid- Multi-language support available through multiple providers:
+  - **Kokoro ONNX**: English, Japanese, Chinese, Spanish, French, and more
+  - **Chatterbox TTS**: English-only
+  - **OpenAI Edge TTS**: 75+ languages including Arabic, German, French, Spanish, Chinese, Japanese, Korean, Hindi, and many more
+- The background videos are sourced from Pexelscontent. Short Video Maker combines text-to-speech, automatic captions, background videos, and music to create engaging short videos from simp-Yes! Extensive multi-language support is now available:
+
+- **Kokoro ONNX provider**: Supports multiple languages including English, Japanese, Chinese, Spanish, French, and more
+- **Chatterbox TTS provider**: Currently English-only
+- **OpenAI Edge TTS provider**: Supports 75+ languages including:
+  - European: German, French, Spanish, Italian, Portuguese, Russian, Dutch, Polish, etc.
+  - Asian: Chinese, Japanese, Korean, Hindi, Thai, Vietnamese, Bengali, etc.
+  - Middle Eastern: Arabic, Hebrew, Persian, Turkish, etc.
+  - African: Afrikaans, Swahili, Zulu, etc.
+  - And many more!
+
+To use other languages, specify `"provider": "kokoro"` or `"provider": "openai-edge-tts"` in your configuration and choose an appropriate voice for your target language.`create-short-video` Creates a short video - the LLM will figure out the right configuration. If you want to use specific configuration, you need to specify those in you prompt.
+- `get-video-status` Somewhat useless, it's meant for checking the status of the video, but since the AI agents aren't really good with the concept of time, you'll probably will end up using the REST API for that anyway.
+- `list-tts-providers` Lists all available TTS (Text-to-Speech) providers: kokoro, chatterbox, openai-edge-tts
+- `list-voices-for-provider` Lists all available voices for a specific TTS provider
+- `list-all-voices` Lists all available voices across all TTS providers text inputs.
 
 This project is meant to provide a free alternative to heavy GPU-power hungry video generation (and a free alternative to expensive, third-party API calls). It doesn't generate a video from scratch based on an image or an image prompt.
 
@@ -64,7 +85,10 @@ You can find example n8n workflows created with the REST/MCP server [in this rep
 # Features
 
 - Generate complete short videos from text prompts
-- Text-to-speech conversion
+- Text-to-speech conversion using Awesome-TTS API with 3 providers:
+  - **Kokoro ONNX**: High-quality neural TTS with multi-language support
+  - **Chatterbox TTS**: Neural TTS with voice cloning capabilities
+  - **OpenAI Edge TTS**: Microsoft Edge TTS wrapper with extensive voice catalog
 - Automatic caption generation and styling
 - Background video search and selection via Pexels
 - Background music with genre/mood selection
@@ -74,7 +98,7 @@ You can find example n8n workflows created with the REST/MCP server [in this rep
 
 Shorts Creator takes simple text inputs and search terms, then:
 
-1. Converts text to speech using Kokoro TTS
+1. Converts text to speech using Awesome-TTS API (Kokoro ONNX, Chatterbox TTS, OpenAI Edge TTS)
 2. Generates accurate captions via Whisper
 3. Finds relevant background videos from Pexels
 4. Composes all elements with Remotion
@@ -216,7 +240,8 @@ If you are using the [Self-hosted AI starter kit](https://github.com/n8n-io/self
 | music | The mood of the background music. Get the available options from the GET `/api/music-tags` endpoint. | random |
 | captionPosition | The position where the captions should be rendered. Possible options: `top`, `center`, `bottom`. Default value | `bottom` |
 | captionBackgroundColor | The background color of the active caption item. | `blue` |
-| voice | The Kokoro voice. | `af_heart` |
+| voice | The TTS voice to use from the selected provider. | `af_heart` |
+| provider | The TTS provider to use. Options: `kokoro`, `chatterbox`, `openai-edge-tts`. | `kokoro` |
 | orientation | The video orientation. Possible options are `portrait` and `landscape` | `portrait` |
 
 # Usage
@@ -264,7 +289,9 @@ curl --location 'localhost:3123/api/short-video' \
     ],
     "config": {
       "paddingBack": 1500,
-      "music": "chill"
+      "music": "chill",
+      "voice": "af_heart",
+      "provider": "kokoro"
     }
 }'
 ```
@@ -363,6 +390,41 @@ curl --location 'localhost:3123/api/voices'
 ]
 ```
 
+### GET `/api/tts-providers`
+
+```bash
+curl --location 'localhost:3123/api/tts-providers'
+```
+
+```bash
+{
+    "providers": [
+        "kokoro",
+        "chatterbox", 
+        "openai-edge-tts"
+    ]
+}
+```
+
+### GET `/api/voices/{provider}`
+
+```bash
+curl --location 'localhost:3123/api/voices/kokoro'
+```
+
+```bash
+{
+    "provider": "kokoro",
+    "voices": [
+        "af_heart",
+        "af_alloy", 
+        "af_aoede",
+        "af_bella",
+        ...kokoro specific voices
+    ]
+}
+```
+
 ### GET `/api/music-tags`
 
 ```bash
diff --git a/main-tiny.Dockerfile b/main-tiny.Dockerfile
index fe780ab..2f4e0cf 100644
--- a/main-tiny.Dockerfile
+++ b/main-tiny.Dockerfile
@@ -75,7 +75,7 @@ COPY package.json /app/
 ENV DATA_DIR_PATH=/app/data
 ENV DOCKER=true
 ENV WHISPER_MODEL=tiny.en
-ENV KOKORO_MODEL_PRECISION=q4
+ENV TTS_API_URL=https://tts.dahopevi.com/api
 # number of chrome tabs to use for rendering
 ENV CONCURRENCY=1
 # video cache - 100MB
diff --git a/main.Dockerfile b/main.Dockerfile
index 48316df..28aa74d 100644
--- a/main.Dockerfile
+++ b/main.Dockerfile
@@ -75,6 +75,7 @@ COPY package.json /app/
 ENV DATA_DIR_PATH=/app/data
 ENV DOCKER=true
 ENV WHISPER_MODEL=base.en
+ENV TTS_API_URL=https://tts.dahopevi.com/api
 # number of chrome tabs to use for rendering
 ENV CONCURRENCY=1
 # video cache - 100MB
diff --git a/package.json b/package.json
index 5a80dc0..1199fc6 100644
--- a/package.json
+++ b/package.json
@@ -67,7 +67,7 @@
     "express": "^4.18.2",
     "fluent-ffmpeg": "^2.1.3",
     "fs-extra": "^11.3.0",
-    "kokoro-js": "^1.2.0",
+
     "nock": "^14.0.3",
     "pino": "^9.6.0",
     "react": "^19.1.0",
diff --git a/src/config.ts b/src/config.ts
index d40e9a4..c5b1ade 100644
--- a/src/config.ts
+++ b/src/config.ts
@@ -3,12 +3,13 @@ import "dotenv/config";
 import os from "os";
 import fs from "fs-extra";
 import pino from "pino";
-import { kokoroModelPrecision, whisperModels } from "./types/shorts";
+import { whisperModels } from "./types/shorts";
 
 const defaultLogLevel: pino.Level = "info";
 const defaultPort = 3123;
 const whisperVersion = "1.7.1";
-const defaultWhisperModel: whisperModels = "medium.en"; // possible options: "tiny", "tiny.en", "base", "base.en", "small", "small.en", "medium", "medium.en", "large-v1", "large-v2", "large-v3", "large-v3-turbo"
+const defaultWhisperModel: whisperModels = "medium.en";
+const defaultTtsApiUrl = "https://tts.dahopevi.com/api";// possible options: "tiny", "tiny.en", "base", "base.en", "small", "small.en", "medium", "medium.en", "large-v1", "large-v2", "large-v3", "large-v3-turbo"
 
 // Create the global logger
 export const logger = pino({
@@ -45,7 +46,6 @@ export class Config {
   // docker-specific, performance-related settings to prevent memory issues
   public concurrency?: number;
   public videoCacheSizeInBytes: number | null = null;
-
   constructor() {
     this.dataDirPath =
       process.env.DATA_DIR_PATH ||
@@ -79,10 +79,6 @@ export class Config {
     if (process.env.WHISPER_MODEL) {
       this.whisperModel = process.env.WHISPER_MODEL as whisperModels;
     }
-    if (process.env.KOKORO_MODEL_PRECISION) {
-      this.kokoroModelPrecision = process.env
-        .KOKORO_MODEL_PRECISION as kokoroModelPrecision;
-    }
 
     this.concurrency = process.env.CONCURRENCY
       ? parseInt(process.env.CONCURRENCY)
diff --git a/src/server/routers/mcp.ts b/src/server/routers/mcp.ts
index 53cf2fe..b60bfd2 100644
--- a/src/server/routers/mcp.ts
+++ b/src/server/routers/mcp.ts
@@ -5,7 +5,7 @@ import z from "zod";
 
 import { ShortCreator } from "../../short-creator/ShortCreator";
 import { logger } from "../../logger";
-import { renderConfig, sceneInput } from "../../types/shorts";
+import { renderConfig, sceneInput, TTSProvider } from "../../types/shorts";
 
 export class MCPRouter {
   router: express.Router;
@@ -69,6 +69,70 @@ export class MCPRouter {
         };
       },
     );
+
+    this.mcpServer.tool(
+      "list-tts-providers",
+      "List all available TTS (Text-to-Speech) providers",
+      {},
+      async () => {
+        const providers = Object.values(TTSProvider);
+        return {
+          content: [
+            {
+              type: "text",
+              text: JSON.stringify({ providers }, null, 2),
+            },
+          ],
+        };
+      },
+    );
+
+    this.mcpServer.tool(
+      "list-voices-for-provider",
+      "List all available voices for a specific TTS provider",
+      {
+        provider: z.nativeEnum(TTSProvider).describe("The TTS provider to get voices for"),
+      },
+      async ({ provider }) => {
+        try {
+          const voices = await this.shortCreator.getVoicesForProvider(provider);
+          return {
+            content: [
+              {
+                type: "text",
+                text: JSON.stringify({ provider, voices }, null, 2),
+              },
+            ],
+          };
+        } catch (error) {
+          return {
+            content: [
+              {
+                type: "text",
+                text: `Error fetching voices for provider ${provider}: ${error instanceof Error ? error.message : "Unknown error"}`,
+              },
+            ],
+          };
+        }
+      },
+    );
+
+    this.mcpServer.tool(
+      "list-all-voices",
+      "List all available voices across all TTS providers",
+      {},
+      async () => {
+        const voices = this.shortCreator.ListAvailableVoices();
+        return {
+          content: [
+            {
+              type: "text",
+              text: JSON.stringify({ voices }, null, 2),
+            },
+          ],
+        };
+      },
+    );
   }
 
   private setupRoutes() {
diff --git a/src/server/routers/rest.ts b/src/server/routers/rest.ts
index 3b05375..1c1c049 100644
--- a/src/server/routers/rest.ts
+++ b/src/server/routers/rest.ts
@@ -10,6 +10,7 @@ import { validateCreateShortInput } from "../validator";
 import { ShortCreator } from "../../short-creator/ShortCreator";
 import { logger } from "../../logger";
 import { Config } from "../../config";
+import { TTSProvider } from "../../types/shorts";
 
 // todo abstract class
 export class APIRouter {
@@ -99,6 +100,44 @@ export class APIRouter {
       res.status(200).json(this.shortCreator.ListAvailableVoices());
     });
 
+    this.router.get(
+      "/tts-providers",
+      (req: ExpressRequest, res: ExpressResponse) => {
+        const providers = Object.values(TTSProvider);
+        res.status(200).json({ providers });
+      },
+    );
+
+    this.router.get(
+      "/voices/:provider",
+      async (req: ExpressRequest, res: ExpressResponse) => {
+        try {
+          const { provider } = req.params;
+          if (
+            !provider ||
+            !Object.values(TTSProvider).includes(provider as TTSProvider)
+          ) {
+            res.status(400).json({
+              error:
+                "Valid provider is required. Options: " +
+                Object.values(TTSProvider).join(", "),
+            });
+            return;
+          }
+
+          const voices = await this.shortCreator.getVoicesForProvider(
+            provider as TTSProvider,
+          );
+          res.status(200).json({ provider, voices });
+        } catch (error) {
+          logger.error(error, "Error fetching voices for provider");
+          res.status(500).json({
+            error: "Failed to fetch voices for provider",
+          });
+        }
+      },
+    );
+
     this.router.get(
       "/short-videos",
       (req: ExpressRequest, res: ExpressResponse) => {
diff --git a/src/short-creator/ShortCreator.ts b/src/short-creator/ShortCreator.ts
index 72d39e7..6512546 100644
--- a/src/short-creator/ShortCreator.ts
+++ b/src/short-creator/ShortCreator.ts
@@ -4,7 +4,7 @@ import fs from "fs-extra";
 import cuid from "cuid";
 import path from "path";
 
-import { Kokoro } from "./libraries/Kokoro";
+import { TTS } from "./libraries/TTS";
 import { Remotion } from "./libraries/Remotion";
 import { Whisper } from "./libraries/Whisper";
 import { FFMpeg } from "./libraries/FFmpeg";
@@ -13,7 +13,7 @@ import { Config } from "../config";
 import { logger } from "../logger";
 import { MusicManager } from "./music";
 import { type Music } from "../types/shorts";
-import type {
+import {
   SceneInput,
   RenderConfig,
   Scene,
@@ -21,6 +21,8 @@ import type {
   MusicMoodEnum,
   MusicTag,
   MusicForVideo,
+  TTSVoice,
+  TTSProvider
 } from "../types/shorts";
 
 export class ShortCreator {
@@ -28,11 +30,10 @@ export class ShortCreator {
     sceneInput: SceneInput[];
     config: RenderConfig;
     id: string;
-  }[] = [];
-  constructor(
+  }[] = [];  constructor(
     private config: Config,
     private remotion: Remotion,
-    private kokoro: Kokoro,
+    private tts: TTS,
     private whisper: Whisper,
     private ffmpeg: FFMpeg,
     private pexelsApi: PexelsAPI,
@@ -106,10 +107,10 @@ export class ShortCreator {
       config.orientation || OrientationEnum.portrait;
 
     let index = 0;
-    for (const scene of inputScenes) {
-      const audio = await this.kokoro.generate(
+    for (const scene of inputScenes) {      const audio = await this.tts.generate(
         scene.text,
-        config.voice ?? "af_heart",
+        config.voice ?? TTSVoice.af_heart,
+        config.provider ?? TTSProvider.Kokoro
       );
       let { audioLength } = audio;
       const { audio: audioStream } = audio;
@@ -254,8 +255,11 @@ export class ShortCreator {
 
     return videos;
   }
+  public ListAvailableVoices(): TTSVoice[] {
+    return this.tts.listAvailableVoices();
+  }
 
-  public ListAvailableVoices(): string[] {
-    return this.kokoro.listAvailableVoices();
+  public async getVoicesForProvider(provider: TTSProvider): Promise<TTSVoice[]> {
+    return this.tts.getAvailableVoices(provider);
   }
 }
diff --git a/src/short-creator/libraries/Kokoro.ts b/src/short-creator/libraries/Kokoro.ts
deleted file mode 100644
index 29bdc6b..0000000
--- a/src/short-creator/libraries/Kokoro.ts
+++ /dev/null
@@ -1,77 +0,0 @@
-import { KokoroTTS, TextSplitterStream } from "kokoro-js";
-import {
-  VoiceEnum,
-  type kokoroModelPrecision,
-  type Voices,
-} from "../../types/shorts";
-import { KOKORO_MODEL, logger } from "../../config";
-
-export class Kokoro {
-  constructor(private tts: KokoroTTS) {}
-
-  async generate(
-    text: string,
-    voice: Voices,
-  ): Promise<{
-    audio: ArrayBuffer;
-    audioLength: number;
-  }> {
-    const splitter = new TextSplitterStream();
-    const stream = this.tts.stream(splitter, {
-      voice,
-    });
-    splitter.push(text);
-    splitter.close();
-
-    const output = [];
-    for await (const audio of stream) {
-      output.push(audio);
-    }
-
-    const audioBuffers: ArrayBuffer[] = [];
-    let audioLength = 0;
-    for (const audio of output) {
-      audioBuffers.push(audio.audio.toWav());
-      audioLength += audio.audio.audio.length / audio.audio.sampling_rate;
-    }
-
-    const mergedAudioBuffer = Kokoro.concatWavBuffers(audioBuffers);
-    logger.debug({ text, voice, audioLength }, "Audio generated with Kokoro");
-
-    return {
-      audio: mergedAudioBuffer,
-      audioLength: audioLength,
-    };
-  }
-
-  static concatWavBuffers(buffers: ArrayBuffer[]): ArrayBuffer {
-    const header = Buffer.from(buffers[0].slice(0, 44));
-    let totalDataLength = 0;
-
-    const dataParts = buffers.map((buf) => {
-      const b = Buffer.from(buf);
-      const data = b.slice(44);
-      totalDataLength += data.length;
-      return data;
-    });
-
-    header.writeUInt32LE(36 + totalDataLength, 4);
-    header.writeUInt32LE(totalDataLength, 40);
-
-    return Buffer.concat([header, ...dataParts]);
-  }
-
-  static async init(dtype: kokoroModelPrecision): Promise<Kokoro> {
-    const tts = await KokoroTTS.from_pretrained(KOKORO_MODEL, {
-      dtype,
-      device: "cpu", // only "cpu" is supported in node
-    });
-
-    return new Kokoro(tts);
-  }
-
-  listAvailableVoices(): Voices[] {
-    const voices = Object.values(VoiceEnum) as Voices[];
-    return voices;
-  }
-}
diff --git a/src/short-creator/libraries/TTS.ts b/src/short-creator/libraries/TTS.ts
new file mode 100644
index 0000000..252d503
--- /dev/null
+++ b/src/short-creator/libraries/TTS.ts
@@ -0,0 +1,115 @@
+import { logger } from "../../config";
+import { TTSProvider, TTSVoice } from "../../types/shorts";
+
+export class TTS {
+  private baseUrl: string;
+
+  constructor(baseUrl: string = "https://tts.dahopevi.com") {
+    this.baseUrl = baseUrl;
+  }
+
+  async generate(
+    text: string,
+    voice: TTSVoice,
+    provider: TTSProvider,
+    speed: number = 1.0,
+    format: string = "wav"
+  ): Promise<{
+    audio: ArrayBuffer;
+    audioLength: number;
+  }> {
+    try {
+      const response = await fetch(`${this.baseUrl}/api/tts`, {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({
+          text,
+          voice,
+          provider,
+          speed,
+          format,
+        }),
+      });
+
+      if (!response.ok) {
+        throw new Error(`TTS API error: ${response.statusText}`);
+      }
+
+      const result = await response.json();
+      
+      if (!result.success) {
+        throw new Error(`TTS API error: ${result.error}`);
+      }
+
+      // Download the audio file
+      const audioResponse = await fetch(`${this.baseUrl}${result.audio_url}`);
+      if (!audioResponse.ok) {
+        throw new Error(`Failed to download audio: ${audioResponse.statusText}`);
+      }
+
+      const audioBuffer = await audioResponse.arrayBuffer();
+      
+      // Use the duration from the API response
+      const audioLength = result.duration_ms ? result.duration_ms / 1000 : text.split(" ").length * 0.3;
+
+      logger.debug({ text, voice, provider, audioLength }, "Audio generated with Awesome-TTS API");
+
+      return {
+        audio: audioBuffer,
+        audioLength: audioLength,
+      };
+    } catch (error) {
+      logger.error({ error, text, voice, provider }, "Failed to generate audio with TTS API");
+      throw error;
+    }
+  }
+
+  async getAvailableVoices(provider: TTSProvider): Promise<TTSVoice[]> {
+    try {
+      const response = await fetch(`${this.baseUrl}/api/voices/${provider}`);
+      if (!response.ok) {
+        throw new Error(`Failed to fetch voices: ${response.statusText}`);
+      }
+      
+      const voices = await response.json();
+      return voices;
+    } catch (error) {
+      logger.error({ error, provider }, "Failed to fetch available voices");
+      // Return default voices as fallback
+      return this.getDefaultVoices(provider);
+    }
+  }
+
+  listAvailableVoices(): TTSVoice[] {
+    return Object.values(TTSVoice);
+  }
+
+  private getDefaultVoices(provider: TTSProvider): TTSVoice[] {
+    switch (provider) {
+      case TTSProvider.Kokoro:
+        return [
+          TTSVoice.af_heart,
+          TTSVoice.af_alloy,
+          TTSVoice.af_bella,
+          TTSVoice.am_adam,
+          TTSVoice.am_echo,
+        ];
+      case TTSProvider.Chatterbox:
+        return [
+          TTSVoice.Rachel,  // These are example names, actual voices are in the json file
+          TTSVoice.Bella,
+          TTSVoice.Josh,
+        ];
+      case TTSProvider.OpenAIEdge:
+        return [
+          TTSVoice.enUSJenny,
+          TTSVoice.enUSGuy,
+          TTSVoice.enGBSonia,
+        ];
+      default:
+        return Object.values(TTSVoice);
+    }
+  }
+}
diff --git a/src/types/shorts.ts b/src/types/shorts.ts
index 5065e0e..1a6bb9c 100644
--- a/src/types/shorts.ts
+++ b/src/types/shorts.ts
@@ -1,5 +1,58 @@
 import z from "zod";
 
+export enum TTSProvider {
+  Kokoro = "kokoro",
+  Chatterbox = "chatterbox", 
+  OpenAIEdge = "openai-edge-tts"
+}
+
+export enum TTSVoice {
+  // Kokoro voices (from the original VoiceEnum)
+  af_heart = "af_heart",
+  af_alloy = "af_alloy",
+  af_aoede = "af_aoede",
+  af_bella = "af_bella",
+  af_jessica = "af_jessica",
+  af_kore = "af_kore",
+  af_nicole = "af_nicole",
+  af_nova = "af_nova",
+  af_river = "af_river",
+  af_sarah = "af_sarah",
+  af_sky = "af_sky",
+  am_adam = "am_adam",
+  am_echo = "am_echo",
+  am_eric = "am_eric",
+  am_fenrir = "am_fenrir",
+  am_liam = "am_liam",
+  am_michael = "am_michael",
+  am_onyx = "am_onyx",
+  am_puck = "am_puck",
+  am_santa = "am_santa",
+  bf_emma = "bf_emma",
+  bf_isabella = "bf_isabella",
+  bm_george = "bm_george",
+  bm_lewis = "bm_lewis",
+  bf_alice = "bf_alice",
+  bf_lily = "bf_lily",
+  bm_daniel = "bm_daniel",
+  bm_fable = "bm_fable",
+  // Chatterbox voices (example voices)
+  Rachel = "rachel",
+  Domi = "domi", 
+  Bella = "bella",
+  Antoni = "antoni",
+  Elli = "elli",
+  Josh = "josh",
+  Arnold = "arnold",
+  Adam = "adam",
+  Sam = "sam",
+  // OpenAI Edge TTS voices (Microsoft voices)
+  enUSJenny = "en-US-JennyNeural",
+  enUSGuy = "en-US-GuyNeural",
+  enGBSonia = "en-GB-SoniaNeural",
+  enGBRyan = "en-GB-RyanNeural"
+}
+
 export enum MusicMoodEnum {
   sad = "sad",
   melancholic = "melancholic",
@@ -40,37 +93,6 @@ export const sceneInput = z.object({
 });
 export type SceneInput = z.infer<typeof sceneInput>;
 
-export enum VoiceEnum {
-  af_heart = "af_heart",
-  af_alloy = "af_alloy",
-  af_aoede = "af_aoede",
-  af_bella = "af_bella",
-  af_jessica = "af_jessica",
-  af_kore = "af_kore",
-  af_nicole = "af_nicole",
-  af_nova = "af_nova",
-  af_river = "af_river",
-  af_sarah = "af_sarah",
-  af_sky = "af_sky",
-  am_adam = "am_adam",
-  am_echo = "am_echo",
-  am_eric = "am_eric",
-  am_fenrir = "am_fenrir",
-  am_liam = "am_liam",
-  am_michael = "am_michael",
-  am_onyx = "am_onyx",
-  am_puck = "am_puck",
-  am_santa = "am_santa",
-  bf_emma = "bf_emma",
-  bf_isabella = "bf_isabella",
-  bm_george = "bm_george",
-  bm_lewis = "bm_lewis",
-  bf_alice = "bf_alice",
-  bf_lily = "bf_lily",
-  bm_daniel = "bm_daniel",
-  bm_fable = "bm_fable",
-}
-
 export enum OrientationEnum {
   landscape = "landscape",
   portrait = "portrait",
@@ -103,11 +125,14 @@ export const renderConfig = z.object({
     .optional()
     .describe(
       "Background color of the caption, a valid css color, default is blue",
-    ),
-  voice: z
-    .nativeEnum(VoiceEnum)
+    ),  voice: z
+    .nativeEnum(TTSVoice)
     .optional()
     .describe("Voice to be used for the speech, default is af_heart"),
+  provider: z
+    .nativeEnum(TTSProvider)
+    .optional()
+    .describe("The TTS provider to use (Kokoro, Chatterbox, or OpenAI Edge)"),
   orientation: z
     .nativeEnum(OrientationEnum)
     .optional()
@@ -119,7 +144,7 @@ export const renderConfig = z.object({
 });
 export type RenderConfig = z.infer<typeof renderConfig>;
 
-export type Voices = `${VoiceEnum}`;
+export type Voices = `${TTSVoice}`;
 
 export type Video = {
   id: string;
@@ -175,5 +200,4 @@ export type whisperModels =
   | "medium.en"
   | "large-v1"
   | "large-v2"
-  | "large-v3"
-  | "large-v3-turbo";
+  | "large-v3"  | "large-v3-turbo";
diff --git a/voices/README.md b/voices/README.md
new file mode 100644
index 0000000..58d6498
--- /dev/null
+++ b/voices/README.md
@@ -0,0 +1,361 @@
+# 🎤 Awesome-TTS
+
+A unified Text-to-Speech gateway that combines multiple TTS providers into a single, easy-to-use API and modern React web interface.
+
+[![Docker](https://img.shields.io/badge/Docker-Ready-blue.svg)](https://docker.com)
+[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
+[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md)
+
+## 🌟 Features
+
+- **3 High-Quality TTS Providers** unified in a single gateway
+- **Modern React Web Interface** with real-time controls and audio playback
+- **REST API** with consistent endpoints across all providers
+- **Redis Caching** for improved performance and reduced latency
+- **Production Ready** with health monitoring and error handling
+- **Docker Compose** deployment for easy setup
+- **Real-time Service Monitoring** with status dashboard
+
+## 🎯 Supported TTS Providers
+
+| Provider | Type | Features | Quality | Port |
+|----------|------|----------|---------|------|
+| **Kokoro ONNX** | Neural TTS | Multi-language, Grade A voices, Fast inference | ⭐⭐⭐⭐⭐ | 9002 |
+| **Chatterbox TTS** | Neural TTS | Voice cloning, Reference audio, Advanced features | ⭐⭐⭐⭐⭐ | 9001 |
+| **OpenAI Edge TTS** | Edge TTS | OpenAI API compatible, Free Microsoft voices | ⭐⭐⭐⭐ | 5050 |
+
+## 🏗️ Architecture
+
+```
+Frontend (React) → TTS Gateway → Individual TTS Services → Redis Cache
+    :3003             :9000         ├── Kokoro ONNX (9002)
+                                   ├── Chatterbox TTS (9001)
+                                   └── OpenAI Edge TTS (5050)
+```
+
+## 🚀 Quick Start
+
+### Prerequisites
+- Docker and Docker Compose
+- 8GB RAM (recommended)
+- 4 CPU cores (recommended)
+
+### 1. Clone and Setup
+```bash
+git clone https://github.com/isaacgounton/awesome-tts.git
+cd awesome-tts
+
+# Create required directories
+mkdir -p models/kokoro models/chatterbox cache
+```
+
+### 2. Deploy with Docker Compose
+```bash
+# Start all services
+docker-compose up -d
+
+# Monitor logs
+docker-compose logs -f
+
+# Check status
+docker-compose ps
+```
+
+### 3. Access the Application
+- **Web Interface**: http://localhost:3003
+- **API Gateway**: http://localhost:9000
+- **API Documentation**: http://localhost:9000/docs
+- **Service Status**: http://localhost:3003/api/status
+
+#### Individual Services (Direct Access)
+- **Kokoro ONNX**: http://localhost:9002
+- **Chatterbox TTS**: http://localhost:9001
+- **OpenAI Edge TTS**: http://localhost:5050
+
+## 🌐 Web Interface
+
+The modern React frontend provides:
+
+### 🎛️ Provider Selection
+- Switch between Kokoro ONNX, Chatterbox TTS, and OpenAI Edge TTS
+- Dynamic voice loading for each provider
+- Real-time provider status monitoring
+
+### 🎤 Voice Controls
+- **Text Input** with character counter
+- **Voice Selection** from available provider voices
+- **Speed Control** (0.5x - 2.0x)
+- **Pitch Control** (0.5x - 2.0x) - for supported providers
+- **Format Selection** (WAV/MP3)
+
+### 🔊 Audio Playback
+- **Inline Audio Player** with browser controls
+- **Play Button** for quick audio preview
+- **Download Button** for saving audio files
+- **Open in New Tab** for direct file access
+
+### 📊 Real-time Monitoring
+- **Service Status Dashboard** with health indicators
+- **Response Time Monitoring** for each service
+- **Error Display** with detailed error messages
+- **Cache Status** showing cached vs. fresh requests
+
+## 📡 API Usage
+
+### Basic TTS Request
+```bash
+curl -X POST http://localhost:3003/api/tts \
+  -H "Content-Type: application/json" \
+  -d '{
+    "text": "Hello, this is Awesome-TTS!",
+    "provider": "kokoro",
+    "voice": "af_heart",
+    "speed": 1.0,
+    "format": "wav"
+  }' \
+  --output speech.wav
+```
+
+### Get Available Voices
+```bash
+# Kokoro voices
+curl http://localhost:3003/api/voices/kokoro
+
+# Chatterbox voices
+curl http://localhost:3003/api/voices/chatterbox
+
+# OpenAI Edge TTS voices
+curl http://localhost:3003/api/voices/openai-edge-tts
+```
+
+### Python Example
+```python
+import requests
+
+# Generate speech
+response = requests.post('http://localhost:9000/tts', json={
+    "text": "Hello world!",
+    "provider": "kokoro",
+    "voice": "af_heart",
+    "speed": 1.2,
+    "format": "wav"
+})
+
+result = response.json()
+if result['success']:
+    print(f"Generated in {result['duration']}ms")
+    audio_url = f"http://localhost:9000{result['audio_url']}"
+    
+    # Download the audio
+    audio_response = requests.get(audio_url)
+    with open('speech.wav', 'wb') as f:
+        f.write(audio_response.content)
+else:
+    print(f"Error: {result['error']}")
+```
+
+### Available Endpoints
+
+| Endpoint | Method | Description |
+|----------|--------|-------------|
+| `/tts` | POST | Generate speech from text |
+| `/voices/{provider}` | GET | List voices for specific provider |
+| `/status` | GET | Check all service health status |
+| `/health` | GET | Overall gateway health check |
+| `/audio/{id}` | GET | Download cached audio file |
+| `/play/{id}` | GET | Stream audio for inline playback |
+| `/debug` | GET | Comprehensive debug information |
+
+## 🔧 Configuration
+
+### Environment Variables
+
+The services can be configured via environment variables in `docker-compose.yml`:
+
+```yaml
+# TTS Gateway
+environment:
+  - KOKORO_URL=http://kokoro-onnx:9002
+  - CHATTERBOX_URL=http://chatterbox-tts:9001
+  - OPENAI_EDGE_TTS_URL=http://openai-edge-tts:5050
+  - PORT=9000
+  - CORS_ORIGINS=*
+  - REDIS_ENABLED=true
+  - REDIS_URL=redis://redis:6379/1
+
+# Individual Services
+# Kokoro ONNX (PORT=9002)
+# Chatterbox TTS (PORT=9001) 
+# OpenAI Edge TTS (PORT=5050)
+# Frontend (PORT=3003)
+```
+
+### Voice Configuration
+
+Each provider has its own voice configuration:
+
+- **Kokoro**: Uses `kokoro_voices.json` for voice definitions
+- **Chatterbox**: Dynamically loads from reference audio files
+- **OpenAI Edge TTS**: Uses Microsoft Edge TTS voice catalog
+
+## 📦 Service Details
+
+### 🎯 Kokoro ONNX (Port 9002)
+- **High-quality neural TTS** with ONNX optimization
+- **Multi-language support** (EN, JP, CN, ES, FR, etc.)
+- **Grade A voices** with natural prosody
+- **Fast inference** optimized for CPU/GPU
+- **Automatic model downloading** on first run
+
+### 🎪 Chatterbox TTS (Port 9001)
+- **Voice cloning capabilities** with reference audio
+- **Advanced neural models** with high-quality output
+- **Reference audio support** for custom voices
+- **CPU-optimized** for efficient generation
+- **Hugging Face model integration**
+
+### 🌐 OpenAI Edge TTS (Port 5050)
+- **OpenAI API compatibility** for easy integration
+- **Microsoft Edge TTS backend** with extensive voice catalog
+- **Free voice synthesis** using system TTS
+- **Multiple language support** with native speakers
+- **High-quality neural voices**
+
+### 🚪 TTS Gateway (Port 9000)
+- **Unified API** for all TTS providers
+- **Redis caching** for improved performance
+- **Health monitoring** for all services
+- **Error handling** with detailed responses
+- **Audio format conversion** and optimization
+
+### 🖥️ React Frontend (Port 3003)
+- **Modern React 18** with TypeScript
+- **Tailwind CSS** for responsive design
+- **Real-time updates** and status monitoring
+- **Audio controls** with inline playback
+- **Mobile-responsive** interface
+
+## 🔍 Health Monitoring
+
+### Service Status Check
+```bash
+# Check all services
+curl http://localhost:9000/status
+
+# Individual service health
+curl http://localhost:9002/health  # Kokoro
+curl http://localhost:9001/health  # Chatterbox  
+curl http://localhost:5050/v1/models  # OpenAI Edge TTS
+```
+
+### Debug Information
+```bash
+# Comprehensive debug info
+curl http://localhost:9000/debug
+```
+
+This provides detailed information about:
+- Service connectivity and latency
+- Voice availability for each provider  
+- Redis cache status
+- Environment configuration
+- Error diagnostics
+
+## 🎯 Use Cases
+
+- **Content Creation** - Generate voiceovers for videos and podcasts
+- **Accessibility** - Convert text to speech for visually impaired users
+- **Gaming** - Add dynamic voice synthesis to games and applications
+- **Streaming** - Text-to-speech for live streams and broadcasts
+- **Education** - Create audio content from written materials
+- **Development** - Test and compare different TTS providers
+- **Prototyping** - Quickly add voice capabilities to applications
+
+## 🤝 Contributing
+
+We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.
+
+### Adding New TTS Providers
+
+1. Create service directory: `mkdir new-tts-service/`
+2. Add Dockerfile and FastAPI application
+3. Update `docker-compose.yml` with new service
+4. Add provider support in `tts-gateway/app.py`
+5. Update frontend provider list
+6. Submit pull request
+
+## 📋 System Requirements
+
+### Minimum Requirements
+- **Docker** 20.10+
+- **Docker Compose** 2.0+
+- **4GB RAM**
+- **2 CPU cores**
+- **10GB disk space**
+
+### Recommended for Production
+- **8GB RAM** (or more for Chatterbox)
+- **4 CPU cores**
+- **20GB disk space**
+- **SSD storage** for model files
+
+## 🔒 Production Deployment
+
+For production deployment with SSL and custom domains, see the detailed [DEPLOYMENT_GUIDE.md](DEPLOYMENT_GUIDE.md).
+
+Key production features:
+- SSL/HTTPS support
+- Rate limiting and security headers
+- Health monitoring and alerting
+- Backup and recovery procedures
+- Performance optimization tips
+
+## 🐛 Troubleshooting
+
+### Common Issues
+
+**Services not starting:**
+```bash
+# Check logs
+docker-compose logs [service-name]
+
+# Check resource usage
+docker stats
+```
+
+**Audio not playing:**
+```bash
+# Check audio cache
+curl http://localhost:9000/audio/[audio-id]
+
+# Verify service connectivity
+curl http://localhost:9000/debug
+```
+
+**High memory usage:**
+- Chatterbox TTS requires significant memory for model loading
+- Consider adjusting memory limits in `docker-compose.yml`
+- Monitor with `docker stats`
+
+## 📄 License
+
+This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
+
+## 🙏 Acknowledgments
+
+- [Kokoro ONNX](https://github.com/thewh1teagle/kokoro-onnx) - High-quality neural TTS with ONNX optimization
+- [Chatterbox TTS](https://github.com/devnen/Chatterbox-TTS-Server) - Advanced neural TTS with voice cloning
+- [OpenAI Edge TTS](https://github.com/isaacgounton/openai-edge-tts) - OpenAI-compatible Edge TTS wrapper
+- [FastAPI](https://fastapi.tiangolo.com/) - Modern Python web framework
+- [React](https://reactjs.org/) - Frontend user interface library
+- [Docker](https://www.docker.com/) - Containerization platform
+
+## ⭐ Star History
+
+[![Star History Chart](https://api.star-history.com/svg?repos=isaacgounton/awesome-tts&type=Date)](https://star-history.com/#isaacgounton/awesome-tts&Date)
+
+---
+
+**Made with ❤️ for the TTS community**
+
+Found this useful? Please ⭐ star the repository and share it with others!
diff --git a/voices/chatterbox-predefined-voices.json b/voices/chatterbox-predefined-voices.json
new file mode 100644
index 0000000..05cce86
--- /dev/null
+++ b/voices/chatterbox-predefined-voices.json
@@ -0,0 +1,32 @@
+{
+  "voices": [
+    "Abigail.wav",
+    "Adrian.wav",
+    "Alexander.wav",
+    "Alice.wav",
+    "Austin.wav",
+    "Axel.wav",
+    "Connor.wav",
+    "Cora.wav",
+    "Elena.wav",
+    "Eli.wav",
+    "Emily.wav",
+    "Everett.wav",
+    "Gabriel.wav",
+    "Gianna.wav",
+    "Henry.wav",
+    "Ian.wav",
+    "Jade.wav",
+    "Jeremiah.wav",
+    "Jordan.wav",
+    "Julian.wav",
+    "Layla.wav",
+    "Leonardo.wav",
+    "Michael.wav",
+    "Miles.wav",
+    "Olivia.wav",
+    "Ryan.wav",
+    "Taylor.wav",
+    "Thomas.wav"
+  ]
+}
diff --git a/voices/kokoro_voices.json b/voices/kokoro_voices.json
new file mode 100644
index 0000000..5c75065
--- /dev/null
+++ b/voices/kokoro_voices.json
@@ -0,0 +1,434 @@
+[
+  {
+    "name": "af_heart",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Heart (Grade A)",
+    "grade": "A"
+  },
+  {
+    "name": "af_alloy",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Alloy (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "af_aoede",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Aoede (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "af_bella",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Bella (Grade A-)",
+    "grade": "A-"
+  },
+  {
+    "name": "af_jessica",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Jessica (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "af_kore",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Kore (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "af_nicole",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Nicole (Grade B-)",
+    "grade": "B-"
+  },
+  {
+    "name": "af_nova",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Nova (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "af_river",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - River (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "af_sarah",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Sarah (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "af_sky",
+    "gender": "female",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Female - Sky (Grade C-)",
+    "grade": "C-"
+  },
+  {
+    "name": "am_adam",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Adam (Grade F+)",
+    "grade": "F+"
+  },
+  {
+    "name": "am_echo",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Echo (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "am_eric",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Eric (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "am_fenrir",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Fenrir (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "am_liam",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Liam (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "am_michael",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Michael (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "am_onyx",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Onyx (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "am_puck",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Puck (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "am_santa",
+    "gender": "male",
+    "locale": "en-US",
+    "engine": "kokoro",
+    "description": "American Male - Santa (Grade D-)",
+    "grade": "D-"
+  },
+  {
+    "name": "bf_alice",
+    "gender": "female",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Female - Alice (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "bf_emma",
+    "gender": "female",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Female - Emma (Grade B-)",
+    "grade": "B-"
+  },
+  {
+    "name": "bf_isabella",
+    "gender": "female",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Female - Isabella (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "bf_lily",
+    "gender": "female",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Female - Lily (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "bm_daniel",
+    "gender": "male",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Male - Daniel (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "bm_fable",
+    "gender": "male",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Male - Fable (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "bm_george",
+    "gender": "male",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Male - George (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "bm_lewis",
+    "gender": "male",
+    "locale": "en-GB",
+    "engine": "kokoro",
+    "description": "British Male - Lewis (Grade D+)",
+    "grade": "D+"
+  },
+  {
+    "name": "jf_alpha",
+    "gender": "female",
+    "locale": "ja-JP",
+    "engine": "kokoro",
+    "description": "Japanese Female - Alpha (Grade C+)",
+    "grade": "C+"
+  },
+  {
+    "name": "jf_gongitsune",
+    "gender": "female",
+    "locale": "ja-JP",
+    "engine": "kokoro",
+    "description": "Japanese Female - Gongitsune (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "jf_nezumi",
+    "gender": "female",
+    "locale": "ja-JP",
+    "engine": "kokoro",
+    "description": "Japanese Female - Nezumi (Grade C-)",
+    "grade": "C-"
+  },
+  {
+    "name": "jf_tebukuro",
+    "gender": "female",
+    "locale": "ja-JP",
+    "engine": "kokoro",
+    "description": "Japanese Female - Tebukuro (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "jm_kumo",
+    "gender": "male",
+    "locale": "ja-JP",
+    "engine": "kokoro",
+    "description": "Japanese Male - Kumo (Grade C-)",
+    "grade": "C-"
+  },
+  {
+    "name": "zf_xiaobei",
+    "gender": "female",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Female - Xiaobei (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zf_xiaoni",
+    "gender": "female",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Female - Xiaoni (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zf_xiaoxiao",
+    "gender": "female",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Female - Xiaoxiao (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zf_xiaoyi",
+    "gender": "female",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Female - Xiaoyi (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zm_yunjian",
+    "gender": "male",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Male - Yunjian (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zm_yunxi",
+    "gender": "male",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Male - Yunxi (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zm_yunxia",
+    "gender": "male",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Male - Yunxia (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "zm_yunyang",
+    "gender": "male",
+    "locale": "zh-CN",
+    "engine": "kokoro",
+    "description": "Mandarin Chinese Male - Yunyang (Grade D)",
+    "grade": "D"
+  },
+  {
+    "name": "ef_dora",
+    "gender": "female",
+    "locale": "es-ES",
+    "engine": "kokoro",
+    "description": "Spanish Female - Dora (Grade unknown)",
+    "grade": ""
+  },
+  {
+    "name": "em_alex",
+    "gender": "male",
+    "locale": "es-ES",
+    "engine": "kokoro",
+    "description": "Spanish Male - Alex (Grade unknown)",
+    "grade": ""
+  },
+  {
+    "name": "em_santa",
+    "gender": "male",
+    "locale": "es-ES",
+    "engine": "kokoro",
+    "description": "Spanish Male - Santa (Grade unknown)",
+    "grade": ""
+  },
+  {
+    "name": "ff_siwis",
+    "gender": "female",
+    "locale": "fr-FR",
+    "engine": "kokoro",
+    "description": "French Female - Siwis (Grade B-)",
+    "grade": "B-"
+  },
+  {
+    "name": "hf_alpha",
+    "gender": "female",
+    "locale": "hi-IN",
+    "engine": "kokoro",
+    "description": "Hindi Female - Alpha (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "hf_beta",
+    "gender": "female",
+    "locale": "hi-IN",
+    "engine": "kokoro",
+    "description": "Hindi Female - Beta (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "hm_omega",
+    "gender": "male",
+    "locale": "hi-IN",
+    "engine": "kokoro",
+    "description": "Hindi Male - Omega (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "hm_psi",
+    "gender": "male",
+    "locale": "hi-IN",
+    "engine": "kokoro",
+    "description": "Hindi Male - Psi (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "if_sara",
+    "gender": "female",
+    "locale": "it-IT",
+    "engine": "kokoro",
+    "description": "Italian Female - Sara (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "im_nicola",
+    "gender": "male",
+    "locale": "it-IT",
+    "engine": "kokoro",
+    "description": "Italian Male - Nicola (Grade C)",
+    "grade": "C"
+  },
+  {
+    "name": "pf_dora",
+    "gender": "female",
+    "locale": "pt-BR",
+    "engine": "kokoro",
+    "description": "Brazilian Portuguese Female - Dora (Grade unknown)",
+    "grade": ""
+  },
+  {
+    "name": "pm_alex",
+    "gender": "male",
+    "locale": "pt-BR",
+    "engine": "kokoro",
+    "description": "Brazilian Portuguese Male - Alex (Grade unknown)",
+    "grade": ""
+  },
+  {
+    "name": "pm_santa",
+    "gender": "male",
+    "locale": "pt-BR",
+    "engine": "kokoro",
+    "description": "Brazilian Portuguese Male - Santa (Grade unknown)",
+    "grade": ""
+  }
+]
diff --git a/voices/openai_edge_tts_voices.json b/voices/openai_edge_tts_voices.json
new file mode 100644
index 0000000..823ab98
--- /dev/null
+++ b/voices/openai_edge_tts_voices.json
@@ -0,0 +1,1970 @@
+[
+  {
+    "name": "alloy",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "echo",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "fable",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "female"
+  },
+  {
+    "name": "onyx",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "nova",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "shimmer",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "af-ZA-AdriNeural",
+    "engine": "openai-edge-tts",
+    "locale": "af-ZA",
+    "gender": "female"
+  },
+  {
+    "name": "af-ZA-WillemNeural",
+    "engine": "openai-edge-tts",
+    "locale": "af-ZA",
+    "gender": "male"
+  },
+  {
+    "name": "sq-AL-AnilaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sq-AL",
+    "gender": "female"
+  },
+  {
+    "name": "sq-AL-IlirNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sq-AL",
+    "gender": "male"
+  },
+  {
+    "name": "am-ET-AmehaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "am-ET",
+    "gender": "male"
+  },
+  {
+    "name": "am-ET-MekdesNeural",
+    "engine": "openai-edge-tts",
+    "locale": "am-ET",
+    "gender": "female"
+  },
+  {
+    "name": "ar-DZ-AminaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-DZ",
+    "gender": "female"
+  },
+  {
+    "name": "ar-DZ-IsmaelNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-DZ",
+    "gender": "male"
+  },
+  {
+    "name": "ar-BH-AliNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-BH",
+    "gender": "male"
+  },
+  {
+    "name": "ar-BH-LailaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-BH",
+    "gender": "female"
+  },
+  {
+    "name": "ar-EG-SalmaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-EG",
+    "gender": "female"
+  },
+  {
+    "name": "ar-EG-ShakirNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-EG",
+    "gender": "male"
+  },
+  {
+    "name": "ar-IQ-BasselNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-IQ",
+    "gender": "male"
+  },
+  {
+    "name": "ar-IQ-RanaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-IQ",
+    "gender": "female"
+  },
+  {
+    "name": "ar-JO-SanaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-JO",
+    "gender": "female"
+  },
+  {
+    "name": "ar-JO-TaimNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-JO",
+    "gender": "male"
+  },
+  {
+    "name": "ar-KW-FahedNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-KW",
+    "gender": "male"
+  },
+  {
+    "name": "ar-KW-NouraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-KW",
+    "gender": "female"
+  },
+  {
+    "name": "ar-LB-LaylaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-LB",
+    "gender": "female"
+  },
+  {
+    "name": "ar-LB-RamiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-LB",
+    "gender": "male"
+  },
+  {
+    "name": "ar-LY-ImanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-LY",
+    "gender": "female"
+  },
+  {
+    "name": "ar-LY-OmarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-LY",
+    "gender": "male"
+  },
+  {
+    "name": "ar-MA-JamalNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-MA",
+    "gender": "male"
+  },
+  {
+    "name": "ar-MA-MounaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-MA",
+    "gender": "female"
+  },
+  {
+    "name": "ar-OM-AbdullahNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-OM",
+    "gender": "male"
+  },
+  {
+    "name": "ar-OM-AyshaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-OM",
+    "gender": "female"
+  },
+  {
+    "name": "ar-QA-AmalNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-QA",
+    "gender": "female"
+  },
+  {
+    "name": "ar-QA-MoazNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-QA",
+    "gender": "male"
+  },
+  {
+    "name": "ar-SA-HamedNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-SA",
+    "gender": "male"
+  },
+  {
+    "name": "ar-SA-ZariyahNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-SA",
+    "gender": "female"
+  },
+  {
+    "name": "ar-SY-AmanyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-SY",
+    "gender": "female"
+  },
+  {
+    "name": "ar-SY-LaithNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-SY",
+    "gender": "male"
+  },
+  {
+    "name": "ar-TN-HediNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-TN",
+    "gender": "male"
+  },
+  {
+    "name": "ar-TN-ReemNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-TN",
+    "gender": "female"
+  },
+  {
+    "name": "ar-AE-FatimaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-AE",
+    "gender": "female"
+  },
+  {
+    "name": "ar-AE-HamdanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-AE",
+    "gender": "male"
+  },
+  {
+    "name": "ar-YE-MaryamNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-YE",
+    "gender": "female"
+  },
+  {
+    "name": "ar-YE-SalehNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ar-YE",
+    "gender": "male"
+  },
+  {
+    "name": "az-AZ-BabekNeural",
+    "engine": "openai-edge-tts",
+    "locale": "az-AZ",
+    "gender": "male"
+  },
+  {
+    "name": "az-AZ-BanuNeural",
+    "engine": "openai-edge-tts",
+    "locale": "az-AZ",
+    "gender": "female"
+  },
+  {
+    "name": "bn-BD-NabanitaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bn-BD",
+    "gender": "female"
+  },
+  {
+    "name": "bn-BD-PradeepNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bn-BD",
+    "gender": "male"
+  },
+  {
+    "name": "bn-IN-BashkarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bn-IN",
+    "gender": "male"
+  },
+  {
+    "name": "bn-IN-TanishaaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bn-IN",
+    "gender": "female"
+  },
+  {
+    "name": "bs-BA-VesnaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bs-BA",
+    "gender": "female"
+  },
+  {
+    "name": "bs-BA-GoranNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bs-BA",
+    "gender": "male"
+  },
+  {
+    "name": "bg-BG-BorislavNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bg-BG",
+    "gender": "male"
+  },
+  {
+    "name": "bg-BG-KalinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "bg-BG",
+    "gender": "female"
+  },
+  {
+    "name": "my-MM-NilarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "my-MM",
+    "gender": "female"
+  },
+  {
+    "name": "my-MM-ThihaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "my-MM",
+    "gender": "male"
+  },
+  {
+    "name": "ca-ES-EnricNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ca-ES",
+    "gender": "male"
+  },
+  {
+    "name": "ca-ES-JoanaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ca-ES",
+    "gender": "female"
+  },
+  {
+    "name": "zh-HK-HiuGaaiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-HK",
+    "gender": "female"
+  },
+  {
+    "name": "zh-HK-HiuMaanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-HK",
+    "gender": "female"
+  },
+  {
+    "name": "zh-HK-WanLungNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-HK",
+    "gender": "male"
+  },
+  {
+    "name": "zh-CN-XiaoxiaoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "female"
+  },
+  {
+    "name": "zh-CN-XiaoyiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "female"
+  },
+  {
+    "name": "zh-CN-YunjianNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "male"
+  },
+  {
+    "name": "zh-CN-YunxiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "male"
+  },
+  {
+    "name": "zh-CN-YunxiaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "male"
+  },
+  {
+    "name": "zh-CN-YunyangNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN",
+    "gender": "male"
+  },
+  {
+    "name": "zh-CN-liaoning-XiaobeiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN-liaoning",
+    "gender": "female"
+  },
+  {
+    "name": "zh-TW-HsiaoChenNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-TW",
+    "gender": "female"
+  },
+  {
+    "name": "zh-TW-YunJheNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-TW",
+    "gender": "male"
+  },
+  {
+    "name": "zh-TW-HsiaoYuNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-TW",
+    "gender": "female"
+  },
+  {
+    "name": "zh-CN-shaanxi-XiaoniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zh-CN-shaanxi",
+    "gender": "female"
+  },
+  {
+    "name": "hr-HR-GabrijelaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hr-HR",
+    "gender": "female"
+  },
+  {
+    "name": "hr-HR-SreckoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hr-HR",
+    "gender": "male"
+  },
+  {
+    "name": "cs-CZ-AntoninNeural",
+    "engine": "openai-edge-tts",
+    "locale": "cs-CZ",
+    "gender": "male"
+  },
+  {
+    "name": "cs-CZ-VlastaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "cs-CZ",
+    "gender": "female"
+  },
+  {
+    "name": "da-DK-ChristelNeural",
+    "engine": "openai-edge-tts",
+    "locale": "da-DK",
+    "gender": "female"
+  },
+  {
+    "name": "da-DK-JeppeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "da-DK",
+    "gender": "male"
+  },
+  {
+    "name": "nl-BE-ArnaudNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nl-BE",
+    "gender": "male"
+  },
+  {
+    "name": "nl-BE-DenaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nl-BE",
+    "gender": "female"
+  },
+  {
+    "name": "nl-NL-ColetteNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nl-NL",
+    "gender": "female"
+  },
+  {
+    "name": "nl-NL-FennaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nl-NL",
+    "gender": "female"
+  },
+  {
+    "name": "nl-NL-MaartenNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nl-NL",
+    "gender": "male"
+  },
+  {
+    "name": "en-AU-NatashaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-AU",
+    "gender": "female"
+  },
+  {
+    "name": "en-AU-WilliamNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-AU",
+    "gender": "male"
+  },
+  {
+    "name": "en-CA-ClaraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-CA",
+    "gender": "female"
+  },
+  {
+    "name": "en-CA-LiamNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-CA",
+    "gender": "male"
+  },
+  {
+    "name": "en-HK-YanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-HK",
+    "gender": "female"
+  },
+  {
+    "name": "en-HK-SamNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-HK",
+    "gender": "male"
+  },
+  {
+    "name": "en-IN-NeerjaExpressiveNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-IN",
+    "gender": "female"
+  },
+  {
+    "name": "en-IN-NeerjaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-IN",
+    "gender": "female"
+  },
+  {
+    "name": "en-IN-PrabhatNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-IN",
+    "gender": "male"
+  },
+  {
+    "name": "en-IE-ConnorNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-IE",
+    "gender": "male"
+  },
+  {
+    "name": "en-IE-EmilyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-IE",
+    "gender": "female"
+  },
+  {
+    "name": "en-KE-AsiliaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-KE",
+    "gender": "female"
+  },
+  {
+    "name": "en-KE-ChilembaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-KE",
+    "gender": "male"
+  },
+  {
+    "name": "en-NZ-MitchellNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-NZ",
+    "gender": "male"
+  },
+  {
+    "name": "en-NZ-MollyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-NZ",
+    "gender": "female"
+  },
+  {
+    "name": "en-NG-AbeoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-NG",
+    "gender": "male"
+  },
+  {
+    "name": "en-NG-EzinneNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-NG",
+    "gender": "female"
+  },
+  {
+    "name": "en-PH-JamesNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-PH",
+    "gender": "male"
+  },
+  {
+    "name": "en-PH-RosaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-PH",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-AvaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-AndrewNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-EmmaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-BrianNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-SG-LunaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-SG",
+    "gender": "female"
+  },
+  {
+    "name": "en-SG-WayneNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-SG",
+    "gender": "male"
+  },
+  {
+    "name": "en-ZA-LeahNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-ZA",
+    "gender": "female"
+  },
+  {
+    "name": "en-ZA-LukeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-ZA",
+    "gender": "male"
+  },
+  {
+    "name": "en-TZ-ElimuNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-TZ",
+    "gender": "male"
+  },
+  {
+    "name": "en-TZ-ImaniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-TZ",
+    "gender": "female"
+  },
+  {
+    "name": "en-GB-LibbyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "female"
+  },
+  {
+    "name": "en-GB-MaisieNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "female"
+  },
+  {
+    "name": "en-GB-RyanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "male"
+  },
+  {
+    "name": "en-GB-SoniaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "female"
+  },
+  {
+    "name": "en-GB-ThomasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-GB",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-AnaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-AndrewMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-AriaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-AvaMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-BrianMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-ChristopherNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-EmmaMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-EricNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-GuyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-JennyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-MichelleNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "female"
+  },
+  {
+    "name": "en-US-RogerNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "en-US-SteffanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "en-US",
+    "gender": "male"
+  },
+  {
+    "name": "et-EE-AnuNeural",
+    "engine": "openai-edge-tts",
+    "locale": "et-EE",
+    "gender": "female"
+  },
+  {
+    "name": "et-EE-KertNeural",
+    "engine": "openai-edge-tts",
+    "locale": "et-EE",
+    "gender": "male"
+  },
+  {
+    "name": "fil-PH-AngeloNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fil-PH",
+    "gender": "male"
+  },
+  {
+    "name": "fil-PH-BlessicaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fil-PH",
+    "gender": "female"
+  },
+  {
+    "name": "fi-FI-HarriNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fi-FI",
+    "gender": "male"
+  },
+  {
+    "name": "fi-FI-NooraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fi-FI",
+    "gender": "female"
+  },
+  {
+    "name": "fr-BE-CharlineNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-BE",
+    "gender": "female"
+  },
+  {
+    "name": "fr-BE-GerardNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-BE",
+    "gender": "male"
+  },
+  {
+    "name": "fr-CA-ThierryNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CA",
+    "gender": "male"
+  },
+  {
+    "name": "fr-CA-AntoineNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CA",
+    "gender": "male"
+  },
+  {
+    "name": "fr-CA-JeanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CA",
+    "gender": "male"
+  },
+  {
+    "name": "fr-CA-SylvieNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CA",
+    "gender": "female"
+  },
+  {
+    "name": "fr-FR-VivienneMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-FR",
+    "gender": "female"
+  },
+  {
+    "name": "fr-FR-RemyMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-FR",
+    "gender": "male"
+  },
+  {
+    "name": "fr-FR-DeniseNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-FR",
+    "gender": "female"
+  },
+  {
+    "name": "fr-FR-EloiseNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-FR",
+    "gender": "female"
+  },
+  {
+    "name": "fr-FR-HenriNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-FR",
+    "gender": "male"
+  },
+  {
+    "name": "fr-CH-ArianeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CH",
+    "gender": "female"
+  },
+  {
+    "name": "fr-CH-FabriceNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fr-CH",
+    "gender": "male"
+  },
+  {
+    "name": "gl-ES-RoiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "gl-ES",
+    "gender": "male"
+  },
+  {
+    "name": "gl-ES-SabelaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "gl-ES",
+    "gender": "female"
+  },
+  {
+    "name": "ka-GE-EkaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ka-GE",
+    "gender": "female"
+  },
+  {
+    "name": "ka-GE-GiorgiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ka-GE",
+    "gender": "male"
+  },
+  {
+    "name": "de-AT-IngridNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-AT",
+    "gender": "female"
+  },
+  {
+    "name": "de-AT-JonasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-AT",
+    "gender": "male"
+  },
+  {
+    "name": "de-DE-SeraphinaMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "female"
+  },
+  {
+    "name": "de-DE-FlorianMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "male"
+  },
+  {
+    "name": "de-DE-AmalaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "female"
+  },
+  {
+    "name": "de-DE-ConradNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "male"
+  },
+  {
+    "name": "de-DE-KatjaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "female"
+  },
+  {
+    "name": "de-DE-KillianNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-DE",
+    "gender": "male"
+  },
+  {
+    "name": "de-CH-JanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-CH",
+    "gender": "male"
+  },
+  {
+    "name": "de-CH-LeniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "de-CH",
+    "gender": "female"
+  },
+  {
+    "name": "el-GR-AthinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "el-GR",
+    "gender": "female"
+  },
+  {
+    "name": "el-GR-NestorasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "el-GR",
+    "gender": "male"
+  },
+  {
+    "name": "gu-IN-DhwaniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "gu-IN",
+    "gender": "female"
+  },
+  {
+    "name": "gu-IN-NiranjanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "gu-IN",
+    "gender": "male"
+  },
+  {
+    "name": "he-IL-AvriNeural",
+    "engine": "openai-edge-tts",
+    "locale": "he-IL",
+    "gender": "male"
+  },
+  {
+    "name": "he-IL-HilaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "he-IL",
+    "gender": "female"
+  },
+  {
+    "name": "hi-IN-MadhurNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hi-IN",
+    "gender": "male"
+  },
+  {
+    "name": "hi-IN-SwaraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hi-IN",
+    "gender": "female"
+  },
+  {
+    "name": "hu-HU-NoemiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hu-HU",
+    "gender": "female"
+  },
+  {
+    "name": "hu-HU-TamasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "hu-HU",
+    "gender": "male"
+  },
+  {
+    "name": "is-IS-GudrunNeural",
+    "engine": "openai-edge-tts",
+    "locale": "is-IS",
+    "gender": "female"
+  },
+  {
+    "name": "is-IS-GunnarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "is-IS",
+    "gender": "male"
+  },
+  {
+    "name": "id-ID-ArdiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "id-ID",
+    "gender": "male"
+  },
+  {
+    "name": "id-ID-GadisNeural",
+    "engine": "openai-edge-tts",
+    "locale": "id-ID",
+    "gender": "female"
+  },
+  {
+    "name": "iu-Latn-CA-SiqiniqNeural",
+    "engine": "openai-edge-tts",
+    "locale": "iu-Latn-CA",
+    "gender": "female"
+  },
+  {
+    "name": "iu-Latn-CA-TaqqiqNeural",
+    "engine": "openai-edge-tts",
+    "locale": "iu-Latn-CA",
+    "gender": "male"
+  },
+  {
+    "name": "iu-Cans-CA-SiqiniqNeural",
+    "engine": "openai-edge-tts",
+    "locale": "iu-Cans-CA",
+    "gender": "female"
+  },
+  {
+    "name": "iu-Cans-CA-TaqqiqNeural",
+    "engine": "openai-edge-tts",
+    "locale": "iu-Cans-CA",
+    "gender": "male"
+  },
+  {
+    "name": "ga-IE-ColmNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ga-IE",
+    "gender": "male"
+  },
+  {
+    "name": "ga-IE-OrlaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ga-IE",
+    "gender": "female"
+  },
+  {
+    "name": "it-IT-GiuseppeMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "it-IT",
+    "gender": "male"
+  },
+  {
+    "name": "it-IT-DiegoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "it-IT",
+    "gender": "male"
+  },
+  {
+    "name": "it-IT-ElsaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "it-IT",
+    "gender": "female"
+  },
+  {
+    "name": "it-IT-IsabellaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "it-IT",
+    "gender": "female"
+  },
+  {
+    "name": "ja-JP-KeitaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ja-JP",
+    "gender": "male"
+  },
+  {
+    "name": "ja-JP-NanamiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ja-JP",
+    "gender": "female"
+  },
+  {
+    "name": "jv-ID-DimasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "jv-ID",
+    "gender": "male"
+  },
+  {
+    "name": "jv-ID-SitiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "jv-ID",
+    "gender": "female"
+  },
+  {
+    "name": "kn-IN-GaganNeural",
+    "engine": "openai-edge-tts",
+    "locale": "kn-IN",
+    "gender": "male"
+  },
+  {
+    "name": "kn-IN-SapnaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "kn-IN",
+    "gender": "female"
+  },
+  {
+    "name": "kk-KZ-AigulNeural",
+    "engine": "openai-edge-tts",
+    "locale": "kk-KZ",
+    "gender": "female"
+  },
+  {
+    "name": "kk-KZ-DauletNeural",
+    "engine": "openai-edge-tts",
+    "locale": "kk-KZ",
+    "gender": "male"
+  },
+  {
+    "name": "km-KH-PisethNeural",
+    "engine": "openai-edge-tts",
+    "locale": "km-KH",
+    "gender": "male"
+  },
+  {
+    "name": "km-KH-SreymomNeural",
+    "engine": "openai-edge-tts",
+    "locale": "km-KH",
+    "gender": "female"
+  },
+  {
+    "name": "ko-KR-HyunsuMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ko-KR",
+    "gender": "male"
+  },
+  {
+    "name": "ko-KR-InJoonNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ko-KR",
+    "gender": "male"
+  },
+  {
+    "name": "ko-KR-SunHiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ko-KR",
+    "gender": "female"
+  },
+  {
+    "name": "lo-LA-ChanthavongNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lo-LA",
+    "gender": "male"
+  },
+  {
+    "name": "lo-LA-KeomanyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lo-LA",
+    "gender": "female"
+  },
+  {
+    "name": "lv-LV-EveritaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lv-LV",
+    "gender": "female"
+  },
+  {
+    "name": "lv-LV-NilsNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lv-LV",
+    "gender": "male"
+  },
+  {
+    "name": "lt-LT-LeonasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lt-LT",
+    "gender": "male"
+  },
+  {
+    "name": "lt-LT-OnaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "lt-LT",
+    "gender": "female"
+  },
+  {
+    "name": "mk-MK-AleksandarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mk-MK",
+    "gender": "male"
+  },
+  {
+    "name": "mk-MK-MarijaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mk-MK",
+    "gender": "female"
+  },
+  {
+    "name": "ms-MY-OsmanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ms-MY",
+    "gender": "male"
+  },
+  {
+    "name": "ms-MY-YasminNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ms-MY",
+    "gender": "female"
+  },
+  {
+    "name": "ml-IN-MidhunNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ml-IN",
+    "gender": "male"
+  },
+  {
+    "name": "ml-IN-SobhanaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ml-IN",
+    "gender": "female"
+  },
+  {
+    "name": "mt-MT-GraceNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mt-MT",
+    "gender": "female"
+  },
+  {
+    "name": "mt-MT-JosephNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mt-MT",
+    "gender": "male"
+  },
+  {
+    "name": "mr-IN-AarohiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mr-IN",
+    "gender": "female"
+  },
+  {
+    "name": "mr-IN-ManoharNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mr-IN",
+    "gender": "male"
+  },
+  {
+    "name": "mn-MN-BataaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mn-MN",
+    "gender": "male"
+  },
+  {
+    "name": "mn-MN-YesuiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "mn-MN",
+    "gender": "female"
+  },
+  {
+    "name": "ne-NP-HemkalaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ne-NP",
+    "gender": "female"
+  },
+  {
+    "name": "ne-NP-SagarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ne-NP",
+    "gender": "male"
+  },
+  {
+    "name": "nb-NO-FinnNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nb-NO",
+    "gender": "male"
+  },
+  {
+    "name": "nb-NO-PernilleNeural",
+    "engine": "openai-edge-tts",
+    "locale": "nb-NO",
+    "gender": "female"
+  },
+  {
+    "name": "ps-AF-GulNawazNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ps-AF",
+    "gender": "male"
+  },
+  {
+    "name": "ps-AF-LatifaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ps-AF",
+    "gender": "female"
+  },
+  {
+    "name": "fa-IR-DilaraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fa-IR",
+    "gender": "female"
+  },
+  {
+    "name": "fa-IR-FaridNeural",
+    "engine": "openai-edge-tts",
+    "locale": "fa-IR",
+    "gender": "male"
+  },
+  {
+    "name": "pl-PL-MarekNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pl-PL",
+    "gender": "male"
+  },
+  {
+    "name": "pl-PL-ZofiaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pl-PL",
+    "gender": "female"
+  },
+  {
+    "name": "pt-BR-ThalitaMultilingualNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pt-BR",
+    "gender": "female"
+  },
+  {
+    "name": "pt-BR-AntonioNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pt-BR",
+    "gender": "male"
+  },
+  {
+    "name": "pt-BR-FranciscaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pt-BR",
+    "gender": "female"
+  },
+  {
+    "name": "pt-PT-DuarteNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pt-PT",
+    "gender": "male"
+  },
+  {
+    "name": "pt-PT-RaquelNeural",
+    "engine": "openai-edge-tts",
+    "locale": "pt-PT",
+    "gender": "female"
+  },
+  {
+    "name": "ro-RO-AlinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ro-RO",
+    "gender": "female"
+  },
+  {
+    "name": "ro-RO-EmilNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ro-RO",
+    "gender": "male"
+  },
+  {
+    "name": "ru-RU-DmitryNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ru-RU",
+    "gender": "male"
+  },
+  {
+    "name": "ru-RU-SvetlanaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ru-RU",
+    "gender": "female"
+  },
+  {
+    "name": "sr-RS-NicholasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sr-RS",
+    "gender": "male"
+  },
+  {
+    "name": "sr-RS-SophieNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sr-RS",
+    "gender": "female"
+  },
+  {
+    "name": "si-LK-SameeraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "si-LK",
+    "gender": "male"
+  },
+  {
+    "name": "si-LK-ThiliniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "si-LK",
+    "gender": "female"
+  },
+  {
+    "name": "sk-SK-LukasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sk-SK",
+    "gender": "male"
+  },
+  {
+    "name": "sk-SK-ViktoriaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sk-SK",
+    "gender": "female"
+  },
+  {
+    "name": "sl-SI-PetraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sl-SI",
+    "gender": "female"
+  },
+  {
+    "name": "sl-SI-RokNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sl-SI",
+    "gender": "male"
+  },
+  {
+    "name": "so-SO-MuuseNeural",
+    "engine": "openai-edge-tts",
+    "locale": "so-SO",
+    "gender": "male"
+  },
+  {
+    "name": "so-SO-UbaxNeural",
+    "engine": "openai-edge-tts",
+    "locale": "so-SO",
+    "gender": "female"
+  },
+  {
+    "name": "es-AR-ElenaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-AR",
+    "gender": "female"
+  },
+  {
+    "name": "es-AR-TomasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-AR",
+    "gender": "male"
+  },
+  {
+    "name": "es-BO-MarceloNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-BO",
+    "gender": "male"
+  },
+  {
+    "name": "es-BO-SofiaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-BO",
+    "gender": "female"
+  },
+  {
+    "name": "es-CL-CatalinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CL",
+    "gender": "female"
+  },
+  {
+    "name": "es-CL-LorenzoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CL",
+    "gender": "male"
+  },
+  {
+    "name": "es-CO-GonzaloNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CO",
+    "gender": "male"
+  },
+  {
+    "name": "es-CO-SalomeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CO",
+    "gender": "female"
+  },
+  {
+    "name": "es-ES-XimenaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-ES",
+    "gender": "female"
+  },
+  {
+    "name": "es-CR-JuanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CR",
+    "gender": "male"
+  },
+  {
+    "name": "es-CR-MariaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CR",
+    "gender": "female"
+  },
+  {
+    "name": "es-CU-BelkysNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CU",
+    "gender": "female"
+  },
+  {
+    "name": "es-CU-ManuelNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-CU",
+    "gender": "male"
+  },
+  {
+    "name": "es-DO-EmilioNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-DO",
+    "gender": "male"
+  },
+  {
+    "name": "es-DO-RamonaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-DO",
+    "gender": "female"
+  },
+  {
+    "name": "es-EC-AndreaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-EC",
+    "gender": "female"
+  },
+  {
+    "name": "es-EC-LuisNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-EC",
+    "gender": "male"
+  },
+  {
+    "name": "es-SV-LorenaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-SV",
+    "gender": "female"
+  },
+  {
+    "name": "es-SV-RodrigoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-SV",
+    "gender": "male"
+  },
+  {
+    "name": "es-GQ-JavierNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-GQ",
+    "gender": "male"
+  },
+  {
+    "name": "es-GQ-TeresaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-GQ",
+    "gender": "female"
+  },
+  {
+    "name": "es-GT-AndresNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-GT",
+    "gender": "male"
+  },
+  {
+    "name": "es-GT-MartaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-GT",
+    "gender": "female"
+  },
+  {
+    "name": "es-HN-CarlosNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-HN",
+    "gender": "male"
+  },
+  {
+    "name": "es-HN-KarlaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-HN",
+    "gender": "female"
+  },
+  {
+    "name": "es-MX-DaliaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-MX",
+    "gender": "female"
+  },
+  {
+    "name": "es-MX-JorgeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-MX",
+    "gender": "male"
+  },
+  {
+    "name": "es-NI-FedericoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-NI",
+    "gender": "male"
+  },
+  {
+    "name": "es-NI-YolandaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-NI",
+    "gender": "female"
+  },
+  {
+    "name": "es-PA-MargaritaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PA",
+    "gender": "female"
+  },
+  {
+    "name": "es-PA-RobertoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PA",
+    "gender": "male"
+  },
+  {
+    "name": "es-PY-MarioNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PY",
+    "gender": "male"
+  },
+  {
+    "name": "es-PY-TaniaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PY",
+    "gender": "female"
+  },
+  {
+    "name": "es-PE-AlexNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PE",
+    "gender": "male"
+  },
+  {
+    "name": "es-PE-CamilaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PE",
+    "gender": "female"
+  },
+  {
+    "name": "es-PR-KarinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PR",
+    "gender": "female"
+  },
+  {
+    "name": "es-PR-VictorNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-PR",
+    "gender": "male"
+  },
+  {
+    "name": "es-ES-AlvaroNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-ES",
+    "gender": "male"
+  },
+  {
+    "name": "es-ES-ElviraNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-ES",
+    "gender": "female"
+  },
+  {
+    "name": "es-US-AlonsoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-US",
+    "gender": "male"
+  },
+  {
+    "name": "es-US-PalomaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-US",
+    "gender": "female"
+  },
+  {
+    "name": "es-UY-MateoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-UY",
+    "gender": "male"
+  },
+  {
+    "name": "es-UY-ValentinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-UY",
+    "gender": "female"
+  },
+  {
+    "name": "es-VE-PaolaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-VE",
+    "gender": "female"
+  },
+  {
+    "name": "es-VE-SebastianNeural",
+    "engine": "openai-edge-tts",
+    "locale": "es-VE",
+    "gender": "male"
+  },
+  {
+    "name": "su-ID-JajangNeural",
+    "engine": "openai-edge-tts",
+    "locale": "su-ID",
+    "gender": "male"
+  },
+  {
+    "name": "su-ID-TutiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "su-ID",
+    "gender": "female"
+  },
+  {
+    "name": "sw-KE-RafikiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sw-KE",
+    "gender": "male"
+  },
+  {
+    "name": "sw-KE-ZuriNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sw-KE",
+    "gender": "female"
+  },
+  {
+    "name": "sw-TZ-DaudiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sw-TZ",
+    "gender": "male"
+  },
+  {
+    "name": "sw-TZ-RehemaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sw-TZ",
+    "gender": "female"
+  },
+  {
+    "name": "sv-SE-MattiasNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sv-SE",
+    "gender": "male"
+  },
+  {
+    "name": "sv-SE-SofieNeural",
+    "engine": "openai-edge-tts",
+    "locale": "sv-SE",
+    "gender": "female"
+  },
+  {
+    "name": "ta-IN-PallaviNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-IN",
+    "gender": "female"
+  },
+  {
+    "name": "ta-IN-ValluvarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-IN",
+    "gender": "male"
+  },
+  {
+    "name": "ta-MY-KaniNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-MY",
+    "gender": "female"
+  },
+  {
+    "name": "ta-MY-SuryaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-MY",
+    "gender": "male"
+  },
+  {
+    "name": "ta-SG-AnbuNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-SG",
+    "gender": "male"
+  },
+  {
+    "name": "ta-SG-VenbaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-SG",
+    "gender": "female"
+  },
+  {
+    "name": "ta-LK-KumarNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-LK",
+    "gender": "male"
+  },
+  {
+    "name": "ta-LK-SaranyaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ta-LK",
+    "gender": "female"
+  },
+  {
+    "name": "te-IN-MohanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "te-IN",
+    "gender": "male"
+  },
+  {
+    "name": "te-IN-ShrutiNeural",
+    "engine": "openai-edge-tts",
+    "locale": "te-IN",
+    "gender": "female"
+  },
+  {
+    "name": "th-TH-NiwatNeural",
+    "engine": "openai-edge-tts",
+    "locale": "th-TH",
+    "gender": "male"
+  },
+  {
+    "name": "th-TH-PremwadeeNeural",
+    "engine": "openai-edge-tts",
+    "locale": "th-TH",
+    "gender": "female"
+  },
+  {
+    "name": "tr-TR-EmelNeural",
+    "engine": "openai-edge-tts",
+    "locale": "tr-TR",
+    "gender": "female"
+  },
+  {
+    "name": "tr-TR-AhmetNeural",
+    "engine": "openai-edge-tts",
+    "locale": "tr-TR",
+    "gender": "male"
+  },
+  {
+    "name": "uk-UA-OstapNeural",
+    "engine": "openai-edge-tts",
+    "locale": "uk-UA",
+    "gender": "male"
+  },
+  {
+    "name": "uk-UA-PolinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "uk-UA",
+    "gender": "female"
+  },
+  {
+    "name": "ur-IN-GulNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ur-IN",
+    "gender": "female"
+  },
+  {
+    "name": "ur-IN-SalmanNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ur-IN",
+    "gender": "male"
+  },
+  {
+    "name": "ur-PK-AsadNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ur-PK",
+    "gender": "male"
+  },
+  {
+    "name": "ur-PK-UzmaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "ur-PK",
+    "gender": "female"
+  },
+  {
+    "name": "uz-UZ-MadinaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "uz-UZ",
+    "gender": "female"
+  },
+  {
+    "name": "uz-UZ-SardorNeural",
+    "engine": "openai-edge-tts",
+    "locale": "uz-UZ",
+    "gender": "male"
+  },
+  {
+    "name": "vi-VN-HoaiMyNeural",
+    "engine": "openai-edge-tts",
+    "locale": "vi-VN",
+    "gender": "female"
+  },
+  {
+    "name": "vi-VN-NamMinhNeural",
+    "engine": "openai-edge-tts",
+    "locale": "vi-VN",
+    "gender": "male"
+  },
+  {
+    "name": "cy-GB-AledNeural",
+    "engine": "openai-edge-tts",
+    "locale": "cy-GB",
+    "gender": "male"
+  },
+  {
+    "name": "cy-GB-NiaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "cy-GB",
+    "gender": "female"
+  },
+  {
+    "name": "zu-ZA-ThandoNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zu-ZA",
+    "gender": "female"
+  },
+  {
+    "name": "zu-ZA-ThembaNeural",
+    "engine": "openai-edge-tts",
+    "locale": "zu-ZA",
+    "gender": "male"
+  }
+]
\ No newline at end of file
-- 
2.43.0

